# A simple Psi 4 input script to compute SAPT interaction energies
# Requirements scipy 0.13.0+ and numpy 1.7.2+
#
#
# Created by: Daniel G. A. Smith
# Date: 7/29/14
# License: GPL v3.0
#

import time
import numpy as np
from scipy import linalg as SLA
from helper_SAPT import *
np.set_printoptions(precision=5, linewidth=200, threshold=2000, suppress=True)


# Memory for numpy in GB
numpy_memory = 2

# Set molecule to dimer
molecule dimer {
Ne   0.000000000   0.000000000   1.608292610
--
He   0.000000000   0.000000000   -1.608292610
}
# molecule dimer {
# Ar   0.000000000   0.000000000   1.608292610
# --
# C    0.000000000   0.667180730  -2.290248250
# C    0.000000000  -0.667180730  -2.290248250
# H   -0.924007680   1.232023330  -2.289752390
# H    0.924007680   1.232023330  -2.289752390
# H   -0.924007680  -1.232023330  -2.289752390
# H    0.924007680  -1.232023330  -2.289752390
# symmetry c1
# }

set {
basis 6-31G
scf_type pk
e_convergence 1e-8
d_convergence 1e-8
}
# energy('SAPT2')


sapt = helper_SAPT(psi4, energy, dimer)

### Start E100 Electostatics
Elst10 = 4 * np.einsum('abab', sapt.vt('abab'))
print 'Elst10: %1.6e' % Elst10
### End E100 Electrostatics

### Start E100 Exchange
vt_abba = sapt.vt('abba')
vt_abaa = sapt.vt('abaa')
vt_abbb = sapt.vt('abbb')
vt_abab = sapt.vt('abab')
s_ab = sapt.s('ab')

Exch100 = np.einsum('abba', vt_abba)

tmp = 2*vt_abaa - vt_abaa.swapaxes(2, 3)
Exch100 += np.einsum('Ab,abaA', s_ab, tmp)

tmp = 2*vt_abbb - vt_abbb.swapaxes(2,3)
Exch100 += np.einsum('Ba,abBb', s_ab.T, tmp)

Exch100 -= 2 * np.einsum('Ab,BA,abaB', s_ab, s_ab.T, vt_abab)
Exch100 -= 2 * np.einsum('AB,Ba,abAb', s_ab, s_ab.T, vt_abab)
Exch100 += np.einsum('Ab,Ba,abAB', s_ab, s_ab.T, vt_abab)

Exch100 *= -2
print 'Exch10 (S^2): %1.6e' % Exch100
### End E100 (S^2) Exchange

### Start E200 Disp
v_abrs = sapt.v('abrs')
v_rsab = sapt.v('rsab')
e_rsab = 1/(-sapt.eps('r', dim=4) - sapt.eps('s', dim=3) + sapt.eps('a', dim=2) + sapt.eps('b'))

Disp200 = 4 * np.einsum('rsab,rsab,abrs->', e_rsab, v_rsab, v_abrs)
print 'Disp20: %1.6e' % Disp200
### End E200 Disp

### Start E200 Exchange-Dispersion

# Build t_rsab
t_rsab = np.einsum('rsab,rsab->rsab', sapt.v('rsab'), e_rsab)

# Build h_abrs
vt_abar = sapt.vt('abar')
vt_abra = sapt.vt('abra')
vt_absb = sapt.vt('absb')
vt_abbs = sapt.vt('abbs')

tmp = 2 * vt_abar - vt_abra.swapaxes(2, 3)
h_abrs = np.einsum('as,AbAr->abrs', sapt.s('as'), tmp)

tmp = 2 * vt_abra - vt_abar.swapaxes(2, 3)
h_abrs += np.einsum('As,abrA->abrs', sapt.s('as'), tmp)

tmp = 2 * vt_absb - vt_abbs.swapaxes(2, 3)
h_abrs += np.einsum('br,aBsB->abrs', sapt.s('br'), tmp)

tmp = 2 * vt_abbs - vt_absb.swapaxes(2, 3)
h_abrs += np.einsum('Br,abBs->abrs', sapt.s('br'), tmp)

# Build q_abrs
vt_abas = sapt.vt('abas')
q_abrs =      np.einsum('br,AB,aBAs', sapt.s('br'), sapt.s('ab'), vt_abas) 
q_abrs -= 2 * np.einsum('Br,AB,abAs', sapt.s('br'), sapt.s('ab'), vt_abas) 
q_abrs -= 2 * np.einsum('br,aB,ABAs', sapt.s('br'), sapt.s('ab'), vt_abas) 
q_abrs += 4 * np.einsum('Br,aB,AbAs', sapt.s('br'), sapt.s('ab'), vt_abas) 

vt_abrb = sapt.vt('abrb')
q_abrs -= 2 * np.einsum('as,bA,ABrB', sapt.s('as'), sapt.s('ba'), vt_abrb) 
q_abrs += 4 * np.einsum('As,bA,aBrB', sapt.s('as'), sapt.s('ba'), vt_abrb) 
q_abrs +=     np.einsum('as,BA,AbrB', sapt.s('as'), sapt.s('ba'), vt_abrb) 
q_abrs -= 2 * np.einsum('As,BA,abrB', sapt.s('as'), sapt.s('ba'), vt_abrb) 

vt_abas = sapt.vt('abab')
q_abrs +=     np.einsum('Br,As,abAB', sapt.s('br'), sapt.s('as'), vt_abab) 
q_abrs -= 2 * np.einsum('br,As,aBAB', sapt.s('br'), sapt.s('as'), vt_abab) 
q_abrs -= 2 * np.einsum('Br,as,AbAB', sapt.s('br'), sapt.s('as'), vt_abab) 

vt_abrs = sapt.vt('abrs')
q_abrs +=     np.einsum('bA,aB,ABrs', sapt.s('ba'), sapt.s('ab'), vt_abrs) 
q_abrs -= 2 * np.einsum('bA,AB,aBrs', sapt.s('ba'), sapt.s('ab'), vt_abrs) 
q_abrs -= 2 * np.einsum('BA,aB,Abrs', sapt.s('ba'), sapt.s('ab'), vt_abrs) 

# Sum it all together
xd_absr = sapt.vt('absr')
xd_absr += h_abrs.swapaxes(2, 3)
xd_absr += q_abrs.swapaxes(2, 3)

print xd_absr.shape
print t_rsab.shape
print np.einsum('absr,rsab->', xd_absr, t_rsab)


### End E200 Exchange-Dispersion

n = sapt.ndocc_A * sapt.nvirt_A

W = 2 * np.einsum('rbab->ra', sapt.v('rbab'))
W += sapt.V_B_AA[sapt.slices['r'], sapt.slices['a']]

eps = (sapt.eps('a', dim=2) - sapt.eps('r')).T
s = W/eps

print np.sum(s * W) * 2

# W = 2 * np.einsum('saba->sb', sapt.v('saba'))
# W += sapt.V_A_BB[sapt.slices['s'], sapt.slices['b']]
# 
# eps = (sapt.eps('b', dim=2) - sapt.eps('s')).T
# s = W/eps
# 
# print np.sum(s * W) * 2


print s
vrAaR = 2 * sapt.v('raar') - sapt.v('rara').swapaxes(2, 3)
vrRaA = 2 * sapt.v('rraa') - sapt.v('rraa').swapaxes(2, 3)
rAaR = vrAaR + vrRaA.swapaxes(1, 3)
arAR = rAaR.swapaxes(1, 2).swapaxes(0,1)

nd = np.zeros_like(W)
nd[np.diag_indices(np.min(nd.shape))] = 1
arAR += np.einsum('ra,RA->arAR', eps, nd)

# print unrel_t
t = np.linalg.solve(arAR.reshape(n,n), W.reshape(n))
#t = t.reshape(sapt.nvirt_A, sapt.ndocc_A)
t = t.reshape(sapt.ndocc_A, sapt.nvirt_A).T
print t
print np.sum(t * W)

# 
# print total.shape
# print W.shape
#print np.linalg.solve(total, W).reshape(sapt.ndocc_A, sapt.nvirt_A).T
# 
# 


#     Second Order Induction Interaction:
#
#     Induction of A ---> B Type      :-0.138853408D-06
#     Induction of B ---> A Type      :-0.721471006D-06

#      Second Order Induction Interaction:
# 
#      Induction of A ---> B Type      :-0.157736322D-06
#      Induction of B ---> A Type      :-0.787115448D-06

