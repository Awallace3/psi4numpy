# A simple Psi 4 script to compute CCSD from a RHF reference
# Scipy and numpy python modules are required
#
# Algorithms were taken directly from Daniel Crawford's programming website:
# http://sirius.chem.vt.edu/wiki/doku.php?id=crawdad:programming
# Special thanks to Lori Burns for integral help
#
# Created by: Daniel G. A. Smith
# Date: 7/29/14
# License: GPL v3.0
#

import time
import numpy as np
from scipy import linalg as SLA
np.set_printoptions(precision=5, linewidth=200, suppress=True)

molecule mol {
O
H 1 1.1
H 1 1.1 2 104
symmetry c1
}


set {
basis cc-pVDZ
scf_type pk
guess core
mp2_type conv
freeze_core false
e_convergence 1e-10
d_convergence 1e-10
}

# First compute RHF energy using Psi4
energy('RHF')

# Grab data from wavfunction class 
wfn = wavefunction()

# Grab orbitals
Matrix_C = wfn.Ca()
C = np.asarray(Matrix_C)
nbf = C.shape[0]
mints = MintsHelper()

print("Number as basis functions: %d" % nbf)

# Grab rank 4 ERI
t = time.time()
print("AO ERI size is %.3f GB." % ((nbf ** 4) * 8.e-9))
print("AO Spin ERI size is %.3f GB." % ((nbf ** 4) * 128.e-9))

# Psi4's implementation
print("\nStarting Psi4's AO -> spin-orbital MO transformation...")
t = time.time()
Psi4_MO = np.asarray(mints.mo_spin_eri(Matrix_C, Matrix_C))
print("...transformation complete in %.3f seconds." % (time.time() - t))


print("Building MO ERI...")
t = time.time()
MO = np.asarray(mints.mo_eri(Matrix_C, Matrix_C, Matrix_C, Matrix_C))
print("...built AO ERI in %.3f seconds." % (time.time() - t))

#Make spin-orbital MO
print("\nStarting Numpy's AO -> spin-orbital MO transformation...")

t = time.time()
# Tile MO array so that we have alternating alpha/beta spin orbitals
MO = np.repeat(MO, 2, axis=0)
MO = np.repeat(MO, 2, axis=1)
MO = np.repeat(MO, 2, axis=2)
MO = np.repeat(MO, 2, axis=3)

# Build spin mask
spin_ind = np.arange(nbf * 2, dtype=np.int) % 2
spin_mask = (spin_ind.reshape(-1, 1, 1, 1) == spin_ind.reshape(-1, 1, 1))
spin_mask = spin_mask * (spin_ind.reshape(-1, 1) == spin_ind)

# Compute antisymmetrized MO integrals
MO *= spin_mask
MO = MO - MO.swapaxes(1, 3)
MO = MO.swapaxes(1, 2)
print("...transformation complete in %.3f seconds." % (time.time() - t))
print("Matches Psi4's implementation: %s" % np.allclose(Psi4_MO, MO))



