# A simple Psi 4 input script to compute MP2 from a RHF reference
# Requirements scipy 0.13.0+ and numpy 1.7.2+
#
# Algorithms were taken directly from Daniel Crawford's programming website:
# http://sirius.chem.vt.edu/wiki/doku.php?id=crawdad:programming
# Special thanks to Rob Parrish for initial assistance with libmints
#
# Created by: Daniel G. A. Smith
# Date: 7/29/14
# License: GPL v3.0
#

import time
import numpy as np
from scipy import linalg as SLA
np.set_printoptions(precision=5, linewidth=200, suppress=True)

# Memory for Psi4 in GB
memory 2 GB

# Memory for numpy in GB
numpy_memory = 2


molecule mol {
O
H 1 1.1
H 1 1.1 2 104
symmetry c1
}


set {
basis sto-3G
scf_type pk
guess core
mp2_type conv
e_convergence 1e-8
}

# First compute RHF energy using Psi4
energy('RHF')

# Grab data from 
wfn = wavefunction()
# Coefficient Matrix
C = np.array(wfn.Ca())
# Double occupied orbitals
ndocc = wfn.doccpi()[0]
# Number of molecular orbitals
nmo = wfn.nmo()
# SCF energy
SCF_E = wfn.energy()
# Orbital energies
eps = wfn.epsilon_a()
eps = np.array([eps.get(x) for x in range(C.shape[0])])

# Integral generation from Psi4's MintsHelper
t = time.time()
mints = MintsHelper()
I = np.array(mints.ao_eri())
I = I.reshape(nmo, nmo, nmo, nmo)

print '\nTotal time taken for ERI integrals: %.3f seconds.' % (time.time()-t)


t=time.time()

# Split eigenvectors and eigenvalues into o and v
Co = C[:, :ndocc]
Cv = C[:, ndocc:]

# Complete the AOpqrs -> MOiajb step
MO = np.einsum('rJ,pqrs->pqJs', Co, I)
MO = np.einsum('pI,pqJs->IqJs', Co, MO)
MO = np.einsum('sB,IqJs->IqJB', Cv, MO)
MO = np.einsum('qA,IqJB->IAJB', Cv, MO)

print '\nTotal time taken for integral transformation: %.f seconds' % (time.time()-t)
print 'Shape of MO integrals: %s \n' % str(MO.shape)


# First compute numerator
tmp_MP2 = 2*np.einsum('iajb,iajb->iajb', MO, MO)
tmp_MP2 -= np.einsum('iajb,ibja->ibja', MO, MO)

# Compute energy denominators- must store as a 4-D array
Eocc = eps[:ndocc]
Evirt = eps[ndocc:]
e_denom = (Eocc.reshape(-1,1,1,1) - Evirt.reshape(-1,1,1) + Eocc.reshape(-1,1) - Evirt)

# Divide and sum all elements together
tmp_MP2 /= e_denom
MP2corr_E = np.einsum('iajb->', tmp_MP2) 
MP2total_E = SCF_E + MP2corr_E

print 'MP2 correlation energy: %.8f' % MP2corr_E
print 'MP2 total energy:       %.8f' % MP2total_E
MP2_E_psi = energy('mp2')
compare_values(MP2_E_psi, MP2total_E, 6, 'MP2 Energy')

